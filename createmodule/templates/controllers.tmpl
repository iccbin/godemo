package controllers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

)

type [[.PluralizeTitle]]Controller struct {
	ApplicationController
}

func (ctrl [[.PluralizeTitle]]Controller) Index(c *gin.Context) {
	var [[.PluralizeName]] []models.[[.ModelName]]
	err := ctrl.DB.Model(&models.[[.ModelName]]{}).Find(&[[.PluralizeName]])
    if err != nil {
        c.String(http.StatusOK, err.Error())
    } else {
        c.HTML(http.StatusOK, "index.html", gin.H{
                "title": "index",
                "[[.PluralizeName]]": [[.PluralizeName]],
        })
    }

}

func (ctrl [[.PluralizeTitle]]Controller) New(c *gin.Context) {
	c.HTML(http.StatusOK, "new.html", gin.H{
		"title": "new",
	})
}

func (ctrl [[.PluralizeTitle]]Controller) Create(c *gin.Context) {
    [[range $key,$value := .FieldMap]][[if ne $key "ID"]][[if eq $value.Type "int64"]]
    [[$value.Name]], err := strconv.ParseInt(c.PostForm("[[$value.Name]]"),10,0)[[else if eq $value.Type "float64"]]
    [[$value.Name]], err := strconv.ParseFloat(c.PostForm("[[$value.Name]]"), 64)[[else if eq $value.Type "bool"]]
    [[$value.Name]], err := strconv.ParseBool(c.PostForm("[[$value.Name]]"))[[else if eq $value.Type "string"]]
    [[$value.Name]] := c.PostForm("[[$value.Name]]")[[else if eq $value.Type "uint"]]
    [[$value.Name]], err := strconv.ParseUint('c.PostForm[[$value.Name]]',10,0)[[end]][[end]][[end]]

    if err != nil {
    		c.String(http.StatusOK, err.Error())
    		return
    }
	[[.UnderscoreName]] := models.[[.ModelName]]{[[range $key,$value := .FieldMap]][[if ne $key "ID"]]
	            [[$key]]:  [[$value.Name]],[[end]][[end]]
	        }
	err = ctrl.DB.Create(&[[.UnderscoreName]]).Error
    if err != nil {
    		c.String(http.StatusOK, "create user error")
    } else {
    		c.Redirect(http.StatusMovedPermanently, "/")
    }
}

func (ctrl [[.PluralizeTitle]]Controller) Delete(c *gin.Context) {
	[[.UnderscoreName]]Id, err := strconv.ParseUint(c.Param("id"), 10, 0)
	if err != nil {
        c.String(http.StatusOK, err.Error())
        return
    }

	[[.UnderscoreName]] := models.[[.ModelName]]{ID: [[.UnderscoreName]]Id}

	err := ctrl.DB.Delete(&[[.UnderscoreName]]).Error
	if err != nil {
		c.String(http.StatusOK, err.Error())
	} else {
		c.String(http.StatusOK, "ok")
	}
}

func (ctrl [[.PluralizeTitle]]Controller) Edit(c *gin.Context) {
	[[.UnderscoreName]]Id, err := strconv.ParseUint(c.Param("id"), 10, 0)
	if err != nil {
            c.String(http.StatusOK, err.Error())
            return
    }

	[[.UnderscoreName]] := models.[[.ModelName]]{ID: [[.UnderscoreName]]Id}

	err = ctrl.DB.First(&[[.UnderscoreName]]).Error
	if err != nil {
		c.String(http.StatusOK, err.Error())
	} else {
		c.HTML(http.StatusOK, "edit.html", gin.H{
			"title": "edit",
			"[[.UnderscoreName]]":  [[.UnderscoreName]],
		})
	}
}

func (ctrl [[.PluralizeTitle]]Controller) Update(c *gin.Context) {
	[[range $key,$value := .FieldMap]][[if eq $value.Type "int64"]]
    [[$value.Name]], err := strconv.ParseInt(c.PostForm("[[$value.Name]]"),10,0)[[else if eq $value.Type "float64"]]
    [[$value.Name]], err := strconv.ParseFloat(c.PostForm("[[$value.Name]]"), 64)[[else if eq $value.Type "bool"]]
    [[$value.Name]], err := strconv.ParseBool(c.PostForm("[[$value.Name]]"))[[else if eq $value.Type "string"]]
    [[$value.Name]] := c.PostForm("[[$value.Name]]")[[else if eq $value.Type "uint"]]
    [[$value.Name]], err := strconv.ParseUint(c.PostForm("[[$value.Name]]"),10,0)[[end]][[end]]
    if err != nil {
        c.String(http.StatusOK, err.Error())
        return
    }

	[[.UnderscoreName]] := models.[[.ModelName]]{[[range $key,$value := .FieldMap]]
                    [[$key]]:  [[$value.Name]],[[end]]
            }
	err := ctrl.DB.Save(&[[.UnderscoreName]]).Error
	if err != nil {
		c.String(http.StatusOK, err.Error())
	} else {
		c.String(http.StatusOK, "ok")
	}

}

func (ctrl [[.PluralizeTitle]]Controller) Show(c *gin.Context)  {
	var [[.UnderscoreName]] models.[[.ModelName]]
	err := ctrl.DB.First(&user, c.Param("id")).Error
    if err != nil {
    	c.String(http.StatusOK, err.Error())
    } else {
         c.HTML(http.StatusOK,"show.html",gin.H{
    		"title":"show",
    		"[[.UnderscoreName]]":[[.UnderscoreName]],
    	 })
    }


}