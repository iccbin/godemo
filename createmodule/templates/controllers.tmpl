package controllers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

)

type {{pluralize (title .Name)}}Controller struct {
	ApplicationController
}

func (ctrl {{pluralize (title .Name)}}Controller) Index(c *gin.Context) {
	var {{pluralize .Name}} []models.{{title .Name}}
	ctrl.DB.Model(&models.{{title .Name}}{}).Find(&{{pluralize .Name}})

	c.HTML(http.StatusOK, "index.html", gin.H{
		"title": "index",
		"{{pluralize .Name}}": {{pluralize .Name}},
	})
}

func (ctrl {{pluralize (title .Name)}}Controller) New(c *gin.Context) {
	c.HTML(http.StatusOK, "new.html", gin.H{
		"title": "new",
	})
}

func (ctrl {{pluralize (title .Name)}}Controller) Create(c *gin.Context) {
	{{.Name}} := models.{{title .Name}}{Name: c.PostForm("name"), Password: c.PostForm("password")}
	ctrl.DB.NewRecord({{.Name}})
	ctrl.DB.Create(&{{.Name}})

	c.Redirect(http.StatusMovedPermanently, "/")
}

func (ctrl {{pluralize (title .Name)}}Controller) Delete(c *gin.Context) {
	{{.Name}}Id, _ := strconv.Atoi(c.Param("id"))
	{{.Name}} := models.{{title .Name}}{ID: uint({{.Name}}Id)}

	err := ctrl.DB.Delete(&{{.Name}}).Error
	if err != nil {
		c.String(http.StatusOK, err.Error())
	} else {
		c.String(http.StatusOK, "ok")
	}
}

func (ctrl {{pluralize (title .Name)}}Controller) Edit(c *gin.Context) {
	{{.Name}}Id, _ := strconv.Atoi(c.Param("id"))
	{{.Name}} := models.{{title .Name}}{ID: uint({{.Name}}Id)}

	err := ctrl.DB.First(&{{.Name}}).Error
	if err != nil {
		c.String(http.StatusOK, err.Error())
	} else {
		c.HTML(http.StatusOK, "edit.html", gin.H{
			"title": "edit",
			"{{.Name}}":  {{.Name}},
		})
	}
}

func (ctrl {{pluralize (title .Name)}}Controller) Update(c *gin.Context) {
	{{.Name}}Id, _ := strconv.Atoi(c.Param("id"))
	name := c.PostForm("name")
	password := c.PostForm("password")
	{{.Name}} := models.{{title .Name}}{ID: uint({{.Name}}Id), Name: name, Password: password}

	err := ctrl.DB.Save(&{{.Name}}).Error
	if err != nil {
		c.String(http.StatusOK, err.Error())
	} else {
		c.String(http.StatusOK, "ok")
	}

}

func (ctrl {{pluralize (title .Name)}}Controller) Show(c *gin.Context)  {

	var {{pluralize .Name}} []models.{{title .Name}}
	ctrl.DB.Where("name LIKE ?", "%" + c.Param("key") + "%").Find(&{{pluralize .Name}})

	c.HTML(http.StatusMovedPermanently,"show.html",gin.H{
		"title":"hello",
		"{{pluralize .Name}}":{{pluralize .Name}},
	})

}
